---
layout: post
title:  "Machine Learning Crash Course: Part 3"
date:   2017-1-17
author: Daniel Geng and Shannon Shih
comments: true
published: true
description: The third post in our intro to ML tutorial series! Learn all about neural networks!
---

Neural networks are perhaps one of the most exciting recent developments in machine learning. Got a problem? Just throw a neural net at it. Want to make a self-driving car? Throw a neural net at it. Want to [fly a helicopter](http://hackaday.com/2014/04/22/self-learning-helicopter-uses-neural-network/)? Throw a neural net at it. Curious about the [digestive cycles of your sheep?](http://dl.acm.org/citation.cfm?id=901401)? Heck, throw a neural net at it. This extremely powerful algorithm holds much promise (but can also be a bit overhyped). In this article we’ll go through how a neural network actually works, and we’ll discuss some of the limitations of these seemingly magical tools.

## The Biology

The biological brain is perhaps the most powerful computer that we know of. Compared to our the complex organ, even our most powerful supercomputers are a joke. In 2014, Japanese researchers used a [supercomputer to simulate just one second of human brain activity](http://www.telegraph.co.uk/technology/10567942/Supercomputer-models-one-second-of-human-brain-activity.html). It took [40 minutes and 9.9 million watts](http://systems.closeupengineering.it/en/k-computer-fraction-of-the-human-brain/113/). As for the real thing? The little ball of grey matter in our skulls takes barely 20 watts to run, which translates to roughly one [McChicken](http://www.myfitnesspal.com/food/calories/mcdonalds-mcchicken-biscuit-61698140) a day. 

Neglecting **a lot** of details, biological neurons are cells that send and receive electrical impulses from other neurons that they are connected to. A neuron will only fire an electrical impulse when it receives impulses from other neurons that together are stronger than a certain threshold. Anything lower than that threshold and the neuron won’t do anything. Just what that threshold is is dependent on the chemical properties of the neuron in question and varies from neuron to neuron. Upon firing, an electrical impulse shoots out of the neuron and into more neurons downstream and the process continues. In the brain, billions of these interconnected neurons communicating with each other form the basis for consciousness, thought, and McChicken cravings.

## The History

In the mid 1900’s, a [couple of researchers](https://en.wikipedia.org/wiki/Artificial_neuron#History) with particularly smart brains had the idea of creating a “mathematical model” that would be based on how the brain works. They first created a model for a single neuron which imitated a real neuron’s outputs, inputs, and thresholds. The outputs of these single artificial neurons were then fed into even more artificial neurons, creating an entire artificial neural network.

There was just one problem, while researchers had created a model of the human brain they had no way of teaching it anything. The artificial brain could be wired in whatever way researchers wanted, but the vast majority of these wirings didn’t create a brain that had any logical output at all. What was needed was a learning algorithm for their artificial brain.

It was not until the [1980’s](https://en.wikipedia.org/wiki/Backpropagation#History) that such an efficient learning algorithm was used on neural networks. The algorithm was called backpropagation, and finally allowed neural networks to be trained to do amazing things such as speech recognition or autopilots.

## The Model Overview

Now that we know the basics of how the brain works and the history of neural networks, let’s look at what a neural network actually does. First off, we’ll think of our neural network as a black box, some machine whose inner workings we don’t really know about yet. We want this machine to take in some set number of numerical inputs (that we can choose) and spit out a set number of numerical outputs (that we can also choose). 

IMAGE OF BLACK BOX
caption: A neural network takes in some inputs, math happens, and some number of outputs pop out.

For example, if we want to classify images (say apples and oranges) then we’d want the number of inputs to be the number of pixels in our images, and the number of outputs to be the number of categories we have (two for the case of apples and oranges). If we were trying to model housing prices then the number of inputs would be the number of features we have, such as location, number of bathrooms, and square footage, and the number of outputs would be just one, for the price of the house.

Our machine has inputs and outputs, but how do we control what inputs create what outputs? That is, how do we change the neural network so certain inputs (say an image of an apple) give the correct outputs (say a 0 for the probability of being an orange and a 1 for the probability of being an apple)? Well, we can add “knobs” to our machine to control the output for a given input. In machine learning lingo, these “knobs” are called the parameters of a neural network. If we tune these knobs to the correct place, then for any input we can get the output that we want.

IMAGE????

Going back to our apples and oranges example, if we give our machine an image of an apple but it tells us it thinks it’s an orange then we can go ahead and adjust the knobs of our machine (in other words tune the parameters) until the machine tells us it sees an apple. In essence, this is what it means to train a neural network and this is exactly what the backpropagation algorithm helps do.

## The Model (Details)

Now that we know what a neural network should do and roughly how we can get it to learn, let’s peer inside the black box and talk about what is happening inside the network. To start, we'll discuss what happens inside a single artificial neuron and build it up from there.

For those who have read our post on perceptrons [[[[[ LINK TO POST!!!! ]]]]], this will be very familiar material. That’s because a neuron in a neural network is basically a perceptron on steroids. Similarly to a perceptron, a neuron takes in any number of numerical inputs and has just one output. To get to this output, the neuron calculates an intermediate value called \( s \) by multiplying each input by a different weight, adding them all together, and adding an additional number called the bias. In math: \( s = weight_{1}\times input_{1}+...+weight_{n}\times input_{n}+bias \)

IMAGE OF NERUON CALCULATION

Now each neuron could simply output \( s \), but that would be a bit boring as \( s \) is just a linear function, which makes it rather inflexible for modeling real-world data. What we want to do instead is to add one more step, called an activation function. An activation function is any function that takes in our \( s \) and gives the output of our neuron. The perceptron that we described in the last post gave definitive yes/no answers using a blocky step function as its activation function.

IMAGE OF HEAVESIDE ACTIVATION FUNCTION
Caption: For the step function, there is no way to tell how close you are to a “yes” or a “no”

However, using a step function makes training very difficult because there's no way to tell whether the neural network is getting closer or farther from the correct answer. As an analogy, imagine you are an ant that can only see things very close to you. You are on the lower part of the step function trying to get to the higher part of the step function. But because everything is so flat, you wouldn’t know how far away the “step” part of the step function is, or even in which direction it is (the step function can be mirrored, with a value of 1 on the left and 0 on the right). It’s more or less because of this that makes the step function a bad activation function for training.

To make it easier to train a network, we’ll use a function that is smooth (in other words, a differentiable function). In particular, we’ll use the sigmoid function, which looks something like this:

IMAGE SIGMOID ACTIVATION FUNCTION
Caption: A sigmoid function is a nice activation function because it is smooth everywhere, making it easier to figure out if you're getting closer to the top

Going back to our ant analogy, an ant could figure out exactly which direction to go and how far to go just by checking in which direction and how much the graph slopes at its current location. Despite the fact that the ant can’t see the high part of the sigmoid function, it can tell in which direction it is and roughly how far away it is.

##Linking it all together

We wouldn't have much of a network if we just had one neuron, would we? The secret to a neural network's ability to make complex decisions lies in its internal structure of interconnected neurons. Just like how neurons in the brain are connected to each other, the output of one neuron becomes the input of another neuron, allowing the neurons to work together to come up with the correct answer.

IMAGE OF NEURON FEEDING ANOTHER NEURON

Of course, we can't just randomly connect neurons to each other and expect everything to work perfectly. The design of a neural network is based on the way our brains process data by structuring neurons into groups of computational “units.” For example, the human visual cortex consists of 5 distinct sections called [V1, V2, V3, V4, and V5](https://en.wikipedia.org/wiki/Visual_cortex). Visual stimuli travels from the retina to V1 where low-level details such as edges and colors are picked out. The information generated by V1 then travels to V2, and then V3 and so on, with each cortex processing progressively more and more complicated information.

IMAGE OF NEURAL NETWORK WITH LAYERS

In a similar way, artificial neural network are composed of layers of artificial neurons. In general, there are three types of layers: an input layer, hidden layers, and an output layer. The input layer (on the very left) will take on values of whatever the input is to the the neural network. Notice that we can have our network take any number of inputs by changing the number of neurons in the input layer. Neat! 

Similarly, the output of the output layer (on the very right) will be the output of the whole neural network, and we can change the number of neurons in the output layer to match the number of outputs we want from our network.

Between the input layer and the output layer are hidden layers. The optimal number of hidden layers is the subject of much discussion, but the short answer is that it's completely up to whoever builds the network. For simplicity, we’ll talk about a network with one hidden layer.

Finally, each layer is fully connected to the one before it and after it. This means the output of a single neuron in a layer connects to (or is the input of) every neuron in the next layer, because the information that a neuron provides in one layer could be useful to any neuron in the next layer. Between each connection is a weight that the output is weighted by. Let’s go through a visual example a simple example (use 1-2-1 net)

D3JS EXAMPLE!!!

##How a Neural Network “Works”

DOGE!!!

Say you're trying to recognize Doge. Do the pink spots (flowers) in the background matter when trying to identify the main object in the picture? Probably not, so that information can probably be discarded. 

So what information is relevant? Well, the object has lines of dark and white pixels that indicate fur, ovals that indicate eyes, triangular things that are probably ears, and a big dark triangle-oval patch that seems to be a nose. 

Many people will probably immediately recognize the object as a dog, but what gives it away? Fur, eyes, ears, and nose are all indications, but they must be considered together in order to figure out that the object is a dog. 
We can visualize this thought process with various neurons tasked with identifying increasingly abstract objects in the image:

LABELED NETWORK PICTURE
How someone might identify a dog. Important inputs that are given a lot of weight are highlighted in red.


Notice how the neurons are organized into layers, where the further right the neurons are, the more abstract the input? Trained neural networks function in a very similar way, although they arrive at this conclusion after training with a lot of data. No one explicitly tells the network to identify dogs in the fashion described above. In fact, most of the time it'll accomplish the same thing with a different method that may not make sense to a human. The above example just provides a rough, slightly inaccurate but conceptual understanding of what's really happening under the hood to make the reasons behind the design of a neural network more clear. You can see some examples of what neurons "actually" see [here](http://playground.tensorflow.org). It takes raw data and refines it with math until it has the answer that it needs.

## Training


